/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useEffect, useRef } from 'react'
import { useGLTF, useAnimations, Stars, PerspectiveCamera, OrbitControls } from '@react-three/drei'

import { GLTF } from 'three-stdlib'
import { Suspense } from "react";


import {
  Canvas,
  useFrame,
  useThree,
  extend,
  useLoader,
} from "@react-three/fiber";

type GLTFResult = GLTF & {
  nodes: {
    Mesh052: THREE.SkinnedMesh
    Mesh052_1: THREE.SkinnedMesh
    Mesh052_2: THREE.SkinnedMesh
    Mesh052_3: THREE.SkinnedMesh
    Mesh052_4: THREE.SkinnedMesh
    Mesh052_5: THREE.SkinnedMesh
    Mesh052_6: THREE.SkinnedMesh
    Mesh052_7: THREE.SkinnedMesh
    Mesh052_8: THREE.SkinnedMesh
    Mesh052_9: THREE.SkinnedMesh
    Mesh052_10: THREE.SkinnedMesh
    Mesh052_11: THREE.SkinnedMesh
    pole: THREE.Mesh
    flag: THREE.Mesh
    Root: THREE.Bone
  }
  materials: {
    ['Material #27']: THREE.MeshStandardMaterial
    ['Material #28']: THREE.MeshStandardMaterial
    ['Material #29']: THREE.MeshStandardMaterial
    flame1: THREE.MeshStandardMaterial
    ['flame2.001']: THREE.MeshStandardMaterial
    flame3: THREE.MeshStandardMaterial
    astroVisor: THREE.MeshStandardMaterial
    astrobody: THREE.MeshStandardMaterial
    astrohelmet: THREE.MeshStandardMaterial
    astrodoohickies: THREE.MeshStandardMaterial
    astrogloves: THREE.MeshStandardMaterial
    astropants: THREE.MeshStandardMaterial
    pole: THREE.MeshStandardMaterial
    ['Flag.001']: THREE.MeshStandardMaterial
  }
}

type ActionName = 'AnimNLA'
type GLTFActions = Record<ActionName, THREE.AnimationAction>

const Astronaut3D = ({ ...props }: JSX.IntrinsicElements['group']) => {
  const group = useRef<THREE.Group>(null)
  const { nodes, materials, animations } = useGLTF('/Astronaut.glb') as GLTFResult;
  const { actions, mixer } = useAnimations(animations, group);
  // const { actions } = useAnimations<GLTFActions>(animations, group)

  useEffect(() => {
    console.log(actions)
    actions?.AnimNLA?.play();
  }, []);


  var t = 0;
  useFrame(() => {
    if (group.current !== null) {
      t += 0.0014;
      group.current.rotation.y -= 0.0014;
      group.current.position.x = 8 * Math.cos(t) - 1;
      group.current.position.z = 3 * Math.sin(t); // These to strings make it work
    }

    // if (ref.current.position.x > 300) {
    //   ref.current.position.x = -300;
    // }
  });


  return (
    <>
      <group ref={group} {...props} dispose={null}>
        <group name="Scene" scale={.5}>
          <group name="Armature">
            <primitive object={nodes.Root} />
            <group name="Rocket_Ship_01003">
              <skinnedMesh name="Mesh052" geometry={nodes.Mesh052.geometry} material={materials['Material #27']} skeleton={nodes.Mesh052.skeleton} />
              <skinnedMesh name="Mesh052_1" geometry={nodes.Mesh052_1.geometry} material={materials['Material #28']} skeleton={nodes.Mesh052_1.skeleton} />
              <skinnedMesh name="Mesh052_2" geometry={nodes.Mesh052_2.geometry} material={materials['Material #29']} skeleton={nodes.Mesh052_2.skeleton} />
              <skinnedMesh name="Mesh052_3" geometry={nodes.Mesh052_3.geometry} material={materials.flame1} skeleton={nodes.Mesh052_3.skeleton} />
              <skinnedMesh name="Mesh052_4" geometry={nodes.Mesh052_4.geometry} material={materials['flame2.001']} skeleton={nodes.Mesh052_4.skeleton} />
              <skinnedMesh name="Mesh052_5" geometry={nodes.Mesh052_5.geometry} material={materials.flame3} skeleton={nodes.Mesh052_5.skeleton} />
              <skinnedMesh name="Mesh052_6" geometry={nodes.Mesh052_6.geometry} material={materials.astroVisor} skeleton={nodes.Mesh052_6.skeleton} />
              <skinnedMesh name="Mesh052_7" geometry={nodes.Mesh052_7.geometry} material={materials.astrobody} skeleton={nodes.Mesh052_7.skeleton} />
              <skinnedMesh name="Mesh052_8" geometry={nodes.Mesh052_8.geometry} material={materials.astrohelmet} skeleton={nodes.Mesh052_8.skeleton} />
              <skinnedMesh name="Mesh052_9" geometry={nodes.Mesh052_9.geometry} material={materials.astrodoohickies} skeleton={nodes.Mesh052_9.skeleton} />
              <skinnedMesh name="Mesh052_10" geometry={nodes.Mesh052_10.geometry} material={materials.astrogloves} skeleton={nodes.Mesh052_10.skeleton} />
              <skinnedMesh name="Mesh052_11" geometry={nodes.Mesh052_11.geometry} material={materials.astropants} skeleton={nodes.Mesh052_11.skeleton} />
            </group>
          </group>
          <mesh name="pole" geometry={nodes.pole.geometry} material={materials.pole} position={[-0.41, 1.33, -0.68]} rotation={[-0.44, -0.07, 0.15]} scale={0.04} />
          <mesh name="flag" geometry={nodes.flag.geometry} material={materials['Flag.001']} position={[-0.34, 0.88, -0.99]} rotation={[1.13, 0.16, -1.51]} scale={0.003} />
        </group>
      </group>
    </>

  )
}


useGLTF.preload('/Astronaut.glb')

// export default Astronaut3D;


export default function Astro() {

  return (
    <>
      {/* <PerspectiveCamera makeDefault position={[1, 0, 5]} fov={75}>
        <pointLight intensity={0.7} position={[-5, 15, 15]} />
        <spotLight castShadow intensity={0.4} angle={0.2} penumbra={1} position={[-25, 20, -15]} shadow-mapSize={[1024, 1024]} shadow-bias={-0.0001} />
      </PerspectiveCamera> */}

      <Astronaut3D />

    </>
  );
}